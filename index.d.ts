/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface PackageConfig {
  transform: string;
  preventFullImport: boolean;
  skipDefaultConversion: boolean;
}
export interface PluginImportConfig {
  fromSource: string;
  replaceCss?: ReplaceCssConfig;
  replaceJs?: ReplaceSpecConfig;
}
export interface ReplaceSpecConfig {
  replaceExpr: (member: string) => string;
  ignoreEsComponent?: Array<string>;
  lower?: boolean;
}
export interface ReplaceCssConfig {
  replaceExpr: (member: string) => string;
  ignoreStyleComponent?: Array<string>;
  lower?: boolean;
}
/**
 * Internal plugin
 */
export interface Extensions {
  modularizeImports?: Record<string, PackageConfig>;
  pluginImport?: Array<PluginImportConfig>;
}
export interface TransformConfigNapi {
  /** Raw swc options */
  swc: import("./types").SwcOptions;
  /** Internal rust-swc Plugins */
  extensions: Extensions;
}
export function minify(
  config: string,
  filename: string,
  code: string,
  map?: string
): Promise<{ code: string; map?: string }>;
export interface Output {
  code: string;
  map?: string;
}

interface TransformConfigAsync extends TransformConfigNapi {
  extensions: Omit<Extensions, "pluginImport">
}

export function transformSync(config: TransformConfigAsync, code: string): Output;
export function transform(config: TransformConfigAsync, code: string): Promise<Output>;
